{
  "openapi": "3.0.0",
  "paths": {
    "/oauth/authorize": {
      "get": {
        "operationId": "AuthorizationController_authorize",
        "summary": "Authorize for access_code",
        "parameters": [
          {
            "name": "response_type",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "access_code"
          }
        },
        "tags": [
          "Authorization"
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "operationId": "AuthorizationController_token",
        "summary": "Exchange access_code on tokens (access, refresh, openid)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "access, refresh, openid tokens"
          }
        },
        "tags": [
          "Authorization"
        ]
      }
    },
    "/user/info": {
      "get": {
        "operationId": "UserController_userInfo",
        "summary": "Get user DTO",
        "parameters": [],
        "responses": {
          "200": {
            "description": "UserResponseDto"
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health/records": {
      "get": {
        "operationId": "HealthController_getRecords",
        "summary": "Get all streaks of certain user certain health",
        "parameters": [
          {
            "name": "healthId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of health records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthRecordDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health/subscribe": {
      "post": {
        "operationId": "HealthController_registrateUser",
        "summary": "Subscribe user to a certain health",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Data for subscribe",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "health"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health/beginStreak": {
      "post": {
        "operationId": "HealthController_beginHealthStreak",
        "summary": "Create new streak",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "health"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health/endStreak": {
      "post": {
        "operationId": "HealthController_endHealthStreak",
        "summary": "End existing streak",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "health"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health/init": {
      "post": {
        "operationId": "HealthController_initHealth",
        "summary": "Create new record in health table",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "health"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "AIO_API",
    "description": "API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "access-token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "HealthRecordDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of healthrercord"
          },
          "streakBegin": {
            "type": "string",
            "description": "Day of begging of streak"
          },
          "streakEnd": {
            "type": "string",
            "description": "Day of streak ending"
          }
        },
        "required": [
          "id",
          "streakBegin",
          "streakEnd"
        ]
      },
      "SubscribeDto": {
        "type": "object",
        "properties": {
          "countPerDay": {
            "type": "number",
            "description": "Count of bad dozes per day"
          },
          "healthId": {
            "type": "number",
            "description": "Id of health"
          }
        },
        "required": [
          "countPerDay",
          "healthId"
        ]
      }
    }
  }
}