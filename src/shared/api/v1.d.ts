/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/oauth/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Authorize for access_code */
        get: operations["AuthorizationController_authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exchange access_code on tokens (access, refresh, openid) */
        post: operations["AuthorizationController_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user DTO */
        get: operations["UserController_userInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budget/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories */
        get: operations["BudgetController_getCategories"];
        /** Update an existing category */
        put: operations["BudgetController_updateCategory"];
        /** Create a new category */
        post: operations["BudgetController_createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budget/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a category */
        delete: operations["BudgetController_deleteCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budget/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tags */
        get: operations["BudgetController_getTags"];
        /** Update an existing tag */
        put: operations["BudgetController_updateTag"];
        /** Create a new tag */
        post: operations["BudgetController_createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budget/tag/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a tag by id */
        get: operations["BudgetController_getTagById"];
        put?: never;
        post?: never;
        /** Delete a tag */
        delete: operations["BudgetController_deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budget/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all products with filter */
        get: operations["BudgetController_getProducts"];
        /** Update an existing product */
        put: operations["BudgetController_updateProduct"];
        /** Create a new product */
        post: operations["BudgetController_createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budget/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product by id */
        get: operations["BudgetController_getProductById"];
        put?: never;
        post?: never;
        /** Delete a product */
        delete: operations["BudgetController_deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all streaks of certain user certain health */
        get: operations["HealthController_getRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/stat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all user stat */
        get: operations["HealthController_getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Subscribe user to a certain health */
        post: operations["HealthController_registrateUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/streak": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Is there any continous streak? */
        get: operations["HealthController_isStreakExist"];
        put?: never;
        /** Create or end streak */
        post: operations["HealthController_toggleHealthStreak"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new record in health table */
        post: operations["HealthController_initHealth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/analyse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Analyse exercise weight for day */
        get: operations["SportController_analyseExerciseDay"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/exercises": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all exercises */
        get: operations["SportController_getAllExercises"];
        put?: never;
        /** Create a new exercise */
        post: operations["SportController_createExercise"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/exercises/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing exercise */
        put: operations["SportController_updateExercise"];
        post?: never;
        /** Delete an exercise */
        delete: operations["SportController_deleteExercise"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/exercise-days": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all exercise days */
        get: operations["SportController_getAllExerciseDays"];
        put?: never;
        /** Create a new exercise day */
        post: operations["SportController_createExerciseDay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/exercise-days/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing exercise day */
        put: operations["SportController_updateExerciseDay"];
        post?: never;
        /** Delete an exercise day */
        delete: operations["SportController_deleteExerciseDay"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/exercise-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all exercise records */
        get: operations["SportController_getAllExerciseRecords"];
        put?: never;
        /** Create a new exercise record */
        post: operations["SportController_createExerciseRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/exercise-records/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing exercise record */
        put: operations["SportController_updateExerciseRecord"];
        post?: never;
        /** Delete an exercise record */
        delete: operations["SportController_deleteExerciseRecord"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/plan-exercises": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all plan exercises */
        get: operations["SportController_getAllPlanExercises"];
        put?: never;
        /** Create a new plan exercise */
        post: operations["SportController_createPlanExercise"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/plan-exercises/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing plan exercise */
        put: operations["SportController_updatePlanExercise"];
        post?: never;
        /** Delete a plan exercise */
        delete: operations["SportController_deletePlanExercise"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/plan-exercise-days": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all plan exercise days */
        get: operations["SportController_getAllPlanExerciseDays"];
        put?: never;
        /** Create a new plan exercise day */
        post: operations["SportController_createPlanExerciseDay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sport/plan-exercise-days/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing plan exercise day */
        put: operations["SportController_updatePlanExerciseDay"];
        post?: never;
        /** Delete a plan exercise day */
        delete: operations["SportController_deletePlanExerciseDay"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserResponseDto: {
            /**
             * @description Email
             * @example regular@mail.com
             */
            email: string;
            /**
             * @description Nickname
             * @example John43
             */
            name: string;
            /**
             * @description userId in our system
             * @example a48c8910-9ff2-4a84-ae15-fdce540f4455
             */
            userId: string;
            /**
             * @description Link to Image
             * @example https://e7.pngegg.com/pngimages/251/239/png-clipart-logo-design-rebranding-typography-letter-a-angle-text-thumbnail.png
             */
            userLogo: string;
        };
        CategoryDtoResponse: {
            /** @description Id of category */
            id: number;
            /** @description Name of category */
            name: string;
        };
        CategoryDtoRequest: {
            /** @description Name of category */
            name: string;
        };
        TagDtoResponse: {
            /** @description Name of tag */
            name: string;
            /** @description Color of tag */
            color: string;
            /** @description Id of tag */
            id: number;
            /** @description UserId can be null */
            userId: string;
            /** @description Category */
            category: components["schemas"]["CategoryDtoResponse"];
        };
        TagDtoRequest: {
            /** @description Name of tag */
            name: string;
            /** @description Color of tag */
            color: string;
            /** @description Category id */
            categoryId: number;
            /** @description UserId can be null */
            userId: string;
        };
        TagDtoUpdateRequest: {
            /** @description Id of tag */
            id: number;
            /** @description Name of tag */
            name: string;
            /** @description Color of tag */
            color: string;
            /** @description UserId can be null */
            userId: string;
            /** @description Category Id of tag */
            category: number;
        };
        ProductDtoResponse: {
            /** @description Name of product */
            name: string;
            /** @description Price of product */
            price: number;
            /**
             * Format: date-time
             * @description Date of product when it was added to List
             */
            date: string;
            /** @description Id of product */
            id: number;
            /** @description Tags array with detailed information */
            tags: components["schemas"]["TagDtoResponse"][];
        };
        ProductDtoCreateRequest: {
            /** @description Name of product */
            name: string;
            /** @description Price of product */
            price: number;
            /**
             * Format: date-time
             * @description Date of product when it was added to List
             */
            date: string;
            /** @description List of tags that the product must have in array of tags id */
            tags: number[];
            /** @description UserId can be null */
            userId: string;
        };
        ProductUpdateDtoRequest: {
            /** @description Name of product */
            name: string;
            /** @description Price of product */
            price: number;
            /**
             * Format: date-time
             * @description Date of product when it was added to List
             */
            date: string;
            /** @description Id of product */
            id: number;
            /** @description List of tags that the product must have in array of tags id */
            tags: string[];
            /** @description UserId can be null */
            userId: string;
        };
        HealthRecordDto: {
            /** @description Id of healthrercord */
            id: number;
            /**
             * Format: date-time
             * @description Day of begging of streak
             */
            streakBegin: string;
            /**
             * Format: date-time
             * @description Day of streak ending
             */
            streakEnd: string;
        };
        CompleteStatDto: {
            /** @description Total days of not doing something bad for health */
            totalDays: number;
            /** @description Longest streak */
            longestStreak: number;
            /**
             * Format: date-time
             * @description Last day with bad habit
             */
            lastBadDay: string;
            /** @description Days from begining of all streaks */
            lastStreakDays: number;
            /** @description Bad thing count */
            badThingCount: number;
            /** @description Money saved */
            moneySaved: number;
        };
        SubscribeDto: {
            /** @description Count of bad dozes per day */
            countPerDay: number;
            /** @description Price per thing in USD */
            pricePerThing: number;
            /** @description Id of health */
            healthId: number;
        };
        HealthStreakDto: {
            /** @description HealthId for manipulation with streaks */
            healthId: number;
            /** @description Create or Stop Streak ? */
            create: boolean;
        };
        HealthStreakResponseDto: {
            /** @description Is there any existing streak for given healthId ? */
            isExist: boolean;
        };
        ResponseAnalysisDayDto: {
            /** @description Planned exercise of Day */
            planExercises: unknown[][];
            /** @description Week day of analysed day */
            weekDay: number;
        };
        CreateExerciseDto: {
            /** @description Name of the exercise */
            name: string;
        };
        UpdateExerciseDto: Record<string, never>;
        ResponseExerciseRecordDto: {
            /** @description ID of ExerciseRecord */
            id: number;
            /** @description Exercise name */
            exercise: string;
            /** @description Weight used in the exercise */
            weight: number;
            /** @description Number of repetitions */
            reps: number;
            /** @description ID of the associated exercise day */
            exerciseDayId: number;
        };
        ResponseExerciseDay: {
            /** @description ID of exercise day */
            id: number;
            /**
             * Format: date-time
             * @description Date of the exercise day
             */
            date: string;
            /** @description exerciseRecords of the exercise day */
            exerciseRecords: components["schemas"]["ResponseExerciseRecordDto"][];
            /** @description UserID of exercise day */
            userId: string;
        };
        CreateExerciseDayDto: {
            /**
             * Format: date-time
             * @description Date of the exercise day
             */
            date: string;
        };
        UpdateExerciseDayDto: Record<string, never>;
        CreateExerciseRecordDto: {
            /** @description ID of the associated exercise */
            exercise: string;
            /** @description Weight used in the exercise */
            weight: number;
            /** @description Number of repetitions */
            reps: number;
            /** @description ID of the associated exercise day */
            exerciseDayId?: number;
        };
        UpdateExerciseRecordDto: Record<string, never>;
        ResponsePlanExerciseDto: {
            /** @description ID of Plan Exercise */
            id: number;
            /** @description Exercise name */
            exercise: string;
            /** @description Number of sets */
            sets: number;
            /** @description Number of reps */
            reps: number;
            /** @description ID of the associated plan exercise day */
            planExerciseDayId: number;
        };
        CreatePlanExerciseDto: {
            /** @description ID of the associated exercise */
            exerciseId: number;
            /** @description Number of sets to perform */
            sets: number;
            /** @description Number of repetitions per set */
            reps: number;
            /** @description ID of the associated plan day */
            planExerciseDayId: number;
        };
        UpdatePlanExerciseDto: Record<string, never>;
        CreatePlanExerciseDayDto: {
            /** @description Day of the week (0-6) */
            weekDay: number;
        };
        UpdatePlanExerciseDayDto: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthorizationController_authorize: {
        parameters: {
            query: {
                response_type: string;
                client_id: string;
                redirect_uri: string;
                scope: string;
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description access_code */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthorizationController_token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description access, refresh, openid tokens */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_userInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description UserResponseDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    BudgetController_getCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDtoResponse"][];
                };
            };
        };
    };
    BudgetController_updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryDtoResponse"];
            };
        };
        responses: {
            /** @description The updated category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDtoResponse"];
                };
            };
        };
    };
    BudgetController_createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryDtoRequest"];
            };
        };
        responses: {
            /** @description The created category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDtoResponse"];
                };
            };
        };
    };
    BudgetController_deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BudgetController_getTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagDtoResponse"][];
                };
            };
        };
    };
    BudgetController_updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagDtoUpdateRequest"];
            };
        };
        responses: {
            /** @description The updated tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagDtoResponse"];
                };
            };
        };
    };
    BudgetController_createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagDtoRequest"];
            };
        };
        responses: {
            /** @description The created tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagDtoResponse"];
                };
            };
        };
    };
    BudgetController_getTagById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagDtoResponse"];
                };
            };
        };
    };
    BudgetController_deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BudgetController_getProducts: {
        parameters: {
            query?: {
                /** @description For wich month list products */
                month?: number;
                /** @description For wich year list products */
                year?: number;
                /** @description Partial or full name of product */
                name?: string;
                /** @description List of tags that the product must have in array of tags id */
                tags?: number[];
                /** @description Category of product */
                category?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDtoResponse"][];
                };
            };
        };
    };
    BudgetController_updateProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductUpdateDtoRequest"];
            };
        };
        responses: {
            /** @description The updated product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDtoResponse"];
                };
            };
        };
    };
    BudgetController_createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductDtoCreateRequest"];
            };
        };
        responses: {
            /** @description The created product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDtoResponse"];
                };
            };
        };
    };
    BudgetController_getProductById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDtoResponse"];
                };
            };
        };
    };
    BudgetController_deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_getRecords: {
        parameters: {
            query: {
                healthId: number;
                month: number;
                year: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of health records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthRecordDto"][];
                };
            };
        };
    };
    HealthController_getStats: {
        parameters: {
            query: {
                healthId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of health stats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteStatDto"];
                };
            };
        };
    };
    HealthController_registrateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data for subscribe */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscribeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_isStreakExist: {
        parameters: {
            query: {
                healthId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Boolean meaning streak exist or doesnt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthStreakResponseDto"];
                };
            };
        };
    };
    HealthController_toggleHealthStreak: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Health to create or end streak */
        requestBody: {
            content: {
                "application/json": components["schemas"]["HealthStreakDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_initHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SportController_analyseExerciseDay: {
        parameters: {
            query: {
                /** @description Week day of plan exercise day */
                weekDay: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return analysed day */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseAnalysisDayDto"];
                };
            };
        };
    };
    SportController_getAllExercises: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all exercises. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateExerciseDto"][];
                };
            };
        };
    };
    SportController_createExercise: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateExerciseDto"];
            };
        };
        responses: {
            /** @description The exercise has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateExerciseDto"];
                };
            };
        };
    };
    SportController_updateExercise: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateExerciseDto"];
            };
        };
        responses: {
            /** @description The exercise has been successfully updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateExerciseDto"];
                };
            };
        };
    };
    SportController_deleteExercise: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The exercise has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SportController_getAllExerciseDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all exercise days. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseExerciseDay"][];
                };
            };
        };
    };
    SportController_createExerciseDay: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The exercise day has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateExerciseDayDto"];
                };
            };
        };
    };
    SportController_updateExerciseDay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateExerciseDayDto"];
            };
        };
        responses: {
            /** @description The exercise day has been successfully updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateExerciseDayDto"];
                };
            };
        };
    };
    SportController_deleteExerciseDay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The exercise day has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SportController_getAllExerciseRecords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all exercise records. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseExerciseRecordDto"][];
                };
            };
        };
    };
    SportController_createExerciseRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateExerciseRecordDto"];
            };
        };
        responses: {
            /** @description The exercise record has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseExerciseRecordDto"];
                };
            };
        };
    };
    SportController_updateExerciseRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateExerciseRecordDto"];
            };
        };
        responses: {
            /** @description The exercise record has been successfully updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseExerciseRecordDto"];
                };
            };
        };
    };
    SportController_deleteExerciseRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The exercise record has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SportController_getAllPlanExercises: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all plan exercises. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponsePlanExerciseDto"][];
                };
            };
        };
    };
    SportController_createPlanExercise: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePlanExerciseDto"];
            };
        };
        responses: {
            /** @description The plan exercise has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponsePlanExerciseDto"];
                };
            };
        };
    };
    SportController_updatePlanExercise: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePlanExerciseDto"];
            };
        };
        responses: {
            /** @description The plan exercise has been successfully updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponsePlanExerciseDto"];
                };
            };
        };
    };
    SportController_deletePlanExercise: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The plan exercise has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SportController_getAllPlanExerciseDays: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all plan exercise days. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePlanExerciseDayDto"][];
                };
            };
        };
    };
    SportController_createPlanExerciseDay: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePlanExerciseDayDto"];
            };
        };
        responses: {
            /** @description The plan exercise day has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePlanExerciseDayDto"];
                };
            };
        };
    };
    SportController_updatePlanExerciseDay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePlanExerciseDayDto"];
            };
        };
        responses: {
            /** @description The plan exercise day has been successfully updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePlanExerciseDayDto"];
                };
            };
        };
    };
    SportController_deletePlanExerciseDay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The plan exercise day has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
